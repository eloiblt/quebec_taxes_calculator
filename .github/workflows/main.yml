name: CI - CD

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      version:
        description: "Version (optional if no tag)"
        required: false

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: Production
    permissions: write-all
    outputs:
      image_tag: ${{ steps.version.outputs.TAG }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login https://ghcr.io -u eloiblt --password-stdin

      - name: Extract version
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "TAG=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            echo "TAG=${{ github.event.inputs.version }}" >> "$GITHUB_OUTPUT"
          else
            echo "TAG=latest" >> "$GITHUB_OUTPUT"
          fi

      - name: Print version
        run: echo "Using version ${{ steps.version.outputs.TAG }}"

      - name: Build the stack
        run: docker build -t ghcr.io/eloiblt/quebex-taxes-calculator:${{ steps.version.outputs.TAG }} .

      - name: Push the stack
        run: docker push ghcr.io/eloiblt/quebex-taxes-calculator:${{ steps.version.outputs.TAG }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4

      - name: docker login, pull, and up
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          port: ${{ secrets.VPS_PORT }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo ${{ secrets.GITHUB_TOKEN }} | docker login https://ghcr.io -u eloiblt --password-stdin
            cd ${{ secrets.INSTALL_PATH }}
            echo "IMAGE_TAG=${{ needs.build-and-push.outputs.image_tag }}" > .env
            docker compose pull
            docker compose up -d --force-recreate

  notify-telegram:
    needs: [build-and-push, deploy]
    if: failure()
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - name: Send Telegram notification
        run: |
          TEXT=$(cat <<EOF
          *❌ Erreur lors du déploiement de Quebec Taxes Calculator ❌*

          *Workflow*: [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          *Repository*: \`${{ github.repository }}\`
          *Branch*: \`${{ github.ref_name }}\`
          EOF
          )

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            --data-urlencode text="$TEXT"

          echo "Notification sent to Telegram"